var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Message, Event } from 'grey-message';
/** 心跳消息 */
var HeartbeatEvent = /** @class */ (function (_super) {
    __extends(HeartbeatEvent, _super);
    /**
     * 心跳消息
     */
    function HeartbeatEvent(interval) {
        var _this = _super.call(this, HeartbeatEvent.TYPE) || this;
        _this._interval = 0;
        _this._interval = interval;
        return _this;
    }
    Object.defineProperty(HeartbeatEvent.prototype, "interval", {
        /** 心跳间隔 */
        get: function () {
            return this._interval;
        },
        enumerable: true,
        configurable: true
    });
    /** 消息类型 */
    HeartbeatEvent.TYPE = Message.createType('HeartbeatEvent');
    return HeartbeatEvent;
}(Event));
export { HeartbeatEvent };
var Heartbeat = /** @class */ (function (_super) {
    __extends(Heartbeat, _super);
    function Heartbeat() {
        var _this = _super.call(this) || this;
        /** 上一次心跳时间戳 */
        _this.oldT = new Date().getTime();
        if (Heartbeat._instance) {
            throw '对象为单利';
        }
        else {
            Heartbeat._instance = _this;
            _this.initialization();
        }
        return _this;
    }
    Object.defineProperty(Heartbeat, "instance", {
        /** 获取心跳实例 */
        get: function () {
            if (Heartbeat._instance) {
                return Heartbeat._instance;
            }
            else {
                return new Heartbeat();
            }
        },
        enumerable: true,
        configurable: true
    });
    /** 初始化 */
    Heartbeat.prototype.initialization = function () {
        var _this = this;
        setInterval(function () {
            var newT = new Date().getTime();
            var interval = newT - _this.oldT;
            _this.oldT = newT;
            _this.send(new HeartbeatEvent(interval));
        }, 30);
    };
    return Heartbeat;
}(Message));
export default Heartbeat;
